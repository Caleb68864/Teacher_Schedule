version: '3.8'

services:
  schedule-app:
    build: .
    container_name: teaching-schedule
    ports:
      # Maps host port 9090 to container port 80
      # Access the application at http://localhost:9090
      - "9090:80"
    
    restart: unless-stopped
    
    volumes:
      # PRODUCTION VOLUME MAPPING
      # The application stores all data in browser localStorage (client-side)
      # But you may want to persist nginx logs or custom configurations
      - /srv/docker_data/teacher_schedule/logs:/var/log/nginx
      
      # OPTIONAL: Custom nginx configuration
      # - /srv/docker_data/teacher_schedule/nginx.conf:/etc/nginx/nginx.conf:ro
      
      # DEVELOPMENT VOLUME MAPPING (uncomment for live editing)
      # Mount the entire project directory for development
      # This maps ALL files from current directory to nginx html directory
      # Changes to local files will be reflected immediately in the container
      # :ro means read-only - the container cannot modify these files
      
      # SIMPLE APPROACH - Map entire directory:
      - /srv/docker_data/teacher_schedule/html:/usr/share/nginx/html:ro
      
      # OR INDIVIDUAL FILE MAPPING (if you only want specific files):
      # - ./index.html:/usr/share/nginx/html/index.html:ro
      # - ./editor.html:/usr/share/nginx/html/editor.html:ro
      # - ./help.html:/usr/share/nginx/html/help.html:ro
      # - ./css:/usr/share/nginx/html/css:ro
      # - ./js:/usr/share/nginx/html/js:ro
    
    environment:
      # Set your local timezone for accurate logging
      - TZ=America/New_York
      
      # Optional: Set nginx worker processes (default: auto)
      # - NGINX_WORKER_PROCESSES=2
      
      # Optional: Set nginx worker connections (default: 1024)
      # - NGINX_WORKER_CONNECTIONS=2048
    
    # Labels for reverse proxy integration (e.g., Traefik)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.schedule.rule=Host(`schedule.local`)"
      - "traefik.http.services.schedule.loadbalancer.server.port=80"
    
    # Health check to ensure nginx is running
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Networks configuration
networks:
  default:
    name: teaching_schedule_network
    driver: bridge

# OPTIONAL: Add a reverse proxy for SSL and domain management
# Uncomment this section if you want to use Traefik for SSL/TLS
#   traefik:
#     image: traefik:v2.10
#     container_name: traefik
#     command:
#       # Enable Traefik dashboard (disable in production)
#       - "--api.insecure=true"
#       # Enable Docker provider
#       - "--providers.docker=true"
#       - "--providers.docker.exposedbydefault=false"
#       # HTTP entrypoint
#       - "--entrypoints.web.address=:80"
#       # HTTPS entrypoint
#       - "--entrypoints.websecure.address=:443"
#       # Enable Let's Encrypt for automatic SSL certificates
#       - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
#       - "--certificatesresolvers.myresolver.acme.email=your-email@example.com"
#       - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
#     ports:
#       - "80:80"      # HTTP
#       - "443:443"    # HTTPS
#       - "8081:8080"  # Traefik dashboard (remove in production)
#     volumes:
#       # Docker socket for container discovery
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       # Let's Encrypt certificates storage
#       - /srv/docker_data/teacher_schedule/letsencrypt:/letsencrypt
#     networks:
#       - default

# Volume definitions (for named volumes if needed)
volumes:
  # Named volume for nginx logs (alternative to bind mount)
  # nginx_logs:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: /srv/docker_data/teacher_schedule/logs