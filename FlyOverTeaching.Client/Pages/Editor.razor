@page "/editor"
@using FlyOverTeaching.Client.Services
@using FlyOverTeaching.Shared.Models
@inject IDatabaseService DatabaseService
@inject IScheduleService ScheduleService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>FlyOver Teaching - Schedule Editor</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Schedule Editor</MudText>

<MudGrid>
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <MudText Typo="Typo.h6">Schedule Entries</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="NewEntry">
                    <i class="fas fa-plus me-2"></i> New
                </MudButton>
            </div>
            
            <MudList T="string">
                @foreach (var entry in _scheduleEntries)
                {
                    <MudListItem T="string" OnClick="@(() => SelectEntry(entry))" 
                                Class="@(entry.Id == _selectedEntry?.Id ? "mud-selected-item" : "")">
                        <div class="d-flex align-items-center">
                            <MudAvatar Size="Size.Small" Style="@($"background-color: {entry.Color}")">
                                <i class="fas @entry.Icon text-white"></i>
                            </MudAvatar>
                            <div class="ms-3">
                                <MudText Typo="Typo.body1">@entry.Subject</MudText>
                                <MudText Typo="Typo.caption">@entry.TimeRange</MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
        
        <MudPaper Class="pa-4 mt-3">
            <MudText Typo="Typo.h6" Class="mb-3">Quick Actions</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mb-2" OnClick="OpenThemeDialog">
                <i class="fas fa-palette me-2"></i> Edit Theme
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Info" FullWidth="true" Class="mb-2" OnClick="OpenStudentsDialog">
                <i class="fas fa-user-graduate me-2"></i> Manage Students
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" OnClick="OpenPdfSettingsDialog">
                <i class="fas fa-file-pdf me-2"></i> PDF Settings
            </MudButton>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12" md="8">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6" Class="mb-4">Edit Entry</MudText>
            
            @if (_selectedEntry != null)
            {
                <MudForm @ref="_form">
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_selectedEntry.TimeStart" Label="Start Time" 
                                        Required="true" RequiredError="Start time is required" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_selectedEntry.TimeEnd" Label="End Time" 
                                        Required="true" RequiredError="End time is required" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_selectedEntry.Subject" Label="Subject" 
                                        Required="true" RequiredError="Subject is required" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_selectedEntry.Grade" Label="Grade" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="_selectedEntry.Type" Label="Type">
                                <MudSelectItem Value="@("normal")">Normal</MudSelectItem>
                                <MudSelectItem Value="@("special")">Special</MudSelectItem>
                                <MudSelectItem Value="@("break")">Break</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="_selectedEntry.DayOfWeek" Label="Day of Week">
                                <MudSelectItem Value="@("all")">All Days</MudSelectItem>
                                <MudSelectItem Value="@("monday")">Monday</MudSelectItem>
                                <MudSelectItem Value="@("tuesday")">Tuesday</MudSelectItem>
                                <MudSelectItem Value="@("wednesday")">Wednesday</MudSelectItem>
                                <MudSelectItem Value="@("thursday")">Thursday</MudSelectItem>
                                <MudSelectItem Value="@("friday")">Friday</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudColorPicker @bind-Text="_selectedEntry.Color" Label="Color" 
                                          Style="@($"color: {_selectedEntry.Color}")" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="_selectedEntry.Icon" Label="Icon (Font Awesome class)" 
                                        HelperText="e.g., fa-clock, fa-book, fa-users" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudNumericField @bind-Value="_selectedEntry.SortOrder" Label="Sort Order" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_selectedEntry.Note" Label="Note" Lines="2" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect T="Student" Label="Students" MultiSelection="true" @bind-SelectedValues="_selectedStudents"
                                     ToStringFunc="@(s => s?.Name ?? string.Empty)">
                                @foreach (var student in _allStudents)
                                {
                                    <MudSelectItem Value="@student">@student.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="d-flex justify-content-between mt-3">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteEntry">
                                    <i class="fas fa-trash me-2"></i> Delete
                                </MudButton>
                                <div>
                                    <MudButton Variant="Variant.Text" OnClick="CancelEdit">Cancel</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveEntry">
                                        <i class="fas fa-save me-2"></i> Save
                                    </MudButton>
                                </div>
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            }
            else
            {
                <MudAlert Severity="Severity.Info">Select an entry from the list or create a new one.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudForm? _form;
    private List<ScheduleEntry> _scheduleEntries = new();
    private ScheduleEntry? _selectedEntry;
    private List<Student> _allStudents = new();
    private IEnumerable<Student> _selectedStudents = new List<Student>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await DatabaseService.InitializeAsync();
        _scheduleEntries = await DatabaseService.GetScheduleEntriesAsync();
        _allStudents = await DatabaseService.GetStudentsAsync();
    }

    private void SelectEntry(ScheduleEntry entry)
    {
        _selectedEntry = new ScheduleEntry
        {
            Id = entry.Id,
            TimeStart = entry.TimeStart,
            TimeEnd = entry.TimeEnd,
            Subject = entry.Subject,
            Grade = entry.Grade,
            Type = entry.Type,
            Icon = entry.Icon,
            Color = entry.Color,
            Note = entry.Note,
            DayOfWeek = entry.DayOfWeek,
            SortOrder = entry.SortOrder,
            Students = new List<Student>(entry.Students)
        };
        _selectedStudents = _selectedEntry.Students;
    }

    private void NewEntry()
    {
        _selectedEntry = new ScheduleEntry
        {
            TimeStart = "9:00 AM",
            TimeEnd = "10:00 AM",
            Subject = "New Subject",
            Type = "normal",
            Icon = "fa-clock",
            Color = "#3b82f6",
            DayOfWeek = "all"
        };
        _selectedStudents = new List<Student>();
    }

    private async Task SaveEntry()
    {
        if (_form != null)
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                _selectedEntry!.Students = _selectedStudents.ToList();
                
                if (_selectedEntry.Id == 0)
                {
                    await DatabaseService.AddScheduleEntryAsync(_selectedEntry);
                }
                else
                {
                    await DatabaseService.UpdateScheduleEntryAsync(_selectedEntry);
                }
                
                await LoadData();
                await ScheduleService.RefreshScheduleAsync();
                Snackbar.Add("Entry saved successfully", Severity.Success);
                _selectedEntry = null;
            }
        }
    }

    private async Task DeleteEntry()
    {
        if (_selectedEntry?.Id > 0)
        {
            var parameters = new DialogParameters<ConfirmDialog>
            {
                { x => x.ContentText, "Are you sure you want to delete this entry?" },
                { x => x.ButtonText, "Delete" },
                { x => x.Color, Color.Error }
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Entry", parameters);
            var result = await dialog.Result;
            
            if (result != null && !result.Canceled)
            {
                await DatabaseService.DeleteScheduleEntryAsync(_selectedEntry.Id);
                await LoadData();
                await ScheduleService.RefreshScheduleAsync();
                Snackbar.Add("Entry deleted", Severity.Warning);
                _selectedEntry = null;
            }
        }
    }

    private void CancelEdit()
    {
        _selectedEntry = null;
    }

    private async Task OpenThemeDialog()
    {
        var dialog = await DialogService.ShowAsync<ThemeSettingsDialog>("Theme Settings");
        await dialog.Result;
    }

    private async Task OpenStudentsDialog()
    {
        var dialog = await DialogService.ShowAsync<StudentsDialog>("Manage Students");
        await dialog.Result;
        await LoadData();
    }

    private async Task OpenPdfSettingsDialog()
    {
        var dialog = await DialogService.ShowAsync<PdfSettingsDialog>("PDF Export Settings");
        await dialog.Result;
    }
}